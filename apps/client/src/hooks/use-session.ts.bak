import { apiFetch } from "@/lib/api";
import { usePathname } from "next/navigation";
import useSWR from "swr";

import type { SessionUser } from "@shared/api/auth";
import type { SuccessResponse } from "@shared/api/api";
import { OrgSummary } from "@shared/models/org";
import { toast } from "sonner";
import { isAuthRoute } from "@/lib/utils";

interface SessionResponse
  extends SuccessResponse<{
    user: SessionUser;
    org: OrgSummary;
    organizations: OrgSummary[];
  }> {}

export function useSession() {
  const pathname = usePathname();

  const isAuthPage = isAuthRoute(pathname);

  const { data, mutate, isLoading } = useSWR<SessionResponse>(
    !isAuthPage ? "/api/auth/me" : null,
    () => apiFetch<SessionResponse>("/api/auth/me"),
    {
      revalidateOnFocus: false,
      revalidateOnReconnect: true,
      dedupingInterval: 60_000, // don't re-fetch if a request was made <60s ago
      onError: (err) => {
        toast.error("Session fetch error", {
          description: err.message,
        });
      },
    }
  );

  const setSession = async (session: {
    user: SessionUser;
    org: OrgSummary;
  }) => {
    const fresh = await apiFetch("/api/auth/select-org", {
      method: "POST",
      body: JSON.stringify({ orgId: session.org.id }),
    });

    // Wait for cookie to propagate
    //await new Promise((res) => setTimeout(res, 300));

    // Force-fetch session (bypass SWR)
    //const fresh = await apiFetch<SessionResponse>("/api/auth/me");

    await mutate(fresh, { revalidate: false }); // refresh session from server
  };

  const setSelectedOrg = async (orgId: string) => {
    const fresh = await apiFetch("/api/auth/switch-org", {
      method: "POST",
      body: JSON.stringify({ orgId }),
    });

    // ⏱ small delay to ensure cookie is set before calling mutate
    //await new Promise((res) => setTimeout(res, 300));
    console.log("Mutating starts");

    // Force-fetch session (bypass SWR)
    //const fresh = await apiFetch<SessionResponse>("/api/auth/me");

    await mutate(fresh, { revalidate: true }); // Refresh session from server
  };

  return {
    session: data,
    isLoading,
    setSession,
    mutateSession: mutate,
    setSelectedOrg,
  };
}
